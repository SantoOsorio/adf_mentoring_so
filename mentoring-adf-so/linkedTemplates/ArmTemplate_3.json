{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-so"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Module 7 Load JSON to Azure SQL Database')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load JSON to Azure SQL Database",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate tOnlineService",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SOURCE_azurementoringdatalake_online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SINK_ASQL_movies_stg_online_purchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate stg online_purchase",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DELETE FROM stg.online_purchase;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "spPopulateOnlineService",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load JSON to Azure SQL Database",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateOnlinePurchase",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateOnlineService",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate tOnlineService",
						"description": "DELETE FROM [dbo].[tOnlineService]",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Truncate stg online_purchase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DELETE FROM stg.online_purchase;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-02T22:29:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module 9 Metadata-driven ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadata",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "TruncateTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DISTINCT\n\t   [source_container]\n      ,[source_folder]\n      ,[source_file_name]\n      ,[source_column_delimiter]\n      ,[source_encoding]\n      ,[source_escape_character]\n      ,[source_quote_character]\n      ,[destination_schema_name]\n      ,[destination_table_name]\n      ,[copy_settings_diu_value]\n      ,[source_column]\n      ,[target_column]\n  FROM [etl].[tControlMetadata]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SINK_ASQL_movies_stg_movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadata').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy_data_from_datalake_to_ASQL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "getColumnMapping",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFolderPath": {
													"value": "@item().source_folder",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().source_file_name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@item().copy_settings_diu_value",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(activity('getColumnMapping').output.firstRow.json_output)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_azuredatalakeso_metadata_driven",
											"type": "DatasetReference",
											"parameters": {
												"source_container": {
													"value": "@item().source_container",
													"type": "Expression"
												},
												"source_folder": {
													"value": "@item().source_folder",
													"type": "Expression"
												},
												"source_file_name": {
													"value": "@item().source_file_name",
													"type": "Expression"
												},
												"source_column_delimiter": {
													"value": "@item().source_column_delimiter",
													"type": "Expression"
												},
												"source_encoding": {
													"value": "@item().source_encoding",
													"type": "Expression"
												},
												"source_escape_character": {
													"value": "@item().source_escape_character",
													"type": "Expression"
												},
												"source_quote_character": {
													"value": "@item().source_quote_character",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SINK_ASQL_movies_metadata_driven",
											"type": "DatasetReference",
											"parameters": {
												"destination_schema_name": {
													"value": "@item().destination_schema_name",
													"type": "Expression"
												},
												"destination_table_name": {
													"value": "@item().destination_table_name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "getColumnMapping",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "StartTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[sp_getColumnMapping_v2]",
											"storedProcedureParameters": {
												"schema_name": {
													"type": "String",
													"value": {
														"value": "@item().destination_schema_name",
														"type": "Expression"
													}
												},
												"table_name": {
													"type": "String",
													"value": {
														"value": "@item().destination_table_name",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS__ASQL_GetcolumnMapping_sp",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "InsertLoggingData",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EndTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_insertLoggingData]",
										"storedProcedureParameters": {
											"activity_name": {
												"value": {
													"value": "@item().source_file_name",
													"type": "Expression"
												},
												"type": "String"
											},
											"billing_duration": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.billingReference.billableDuration[0].duration",
													"type": "Expression"
												},
												"type": "String"
											},
											"copy_duration": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.copyDuration",
													"type": "Expression"
												},
												"type": "String"
											},
											"endTime": {
												"value": {
													"value": "@variables('EndTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"meter_type": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"number_of_parallel_copies": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.usedParallelCopies",
													"type": "Expression"
												},
												"type": "String"
											},
											"number_of_processed_files": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.filesRead",
													"type": "Expression"
												},
												"type": "String"
											},
											"number_of_read_rows": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.rowsRead",
													"type": "Expression"
												},
												"type": "String"
											},
											"number_of_used_DIU": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "String"
											},
											"number_of_written_rows": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.rowsCopied",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_runID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"queue_duration": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.executionDetails[0].detailedDurations.queuingDuration",
													"type": "Expression"
												},
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@variables('StartTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"transfer_duration": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.executionDetails[0].detailedDurations.transferDuration",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_movies",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "StartTime",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartTime",
										"value": {
											"value": "@formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "EndTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy_data_from_datalake_to_ASQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "EndTime",
										"value": {
											"value": "@formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "InsertErrorData",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SetErrorMsg",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_UpdateErrorTable]",
										"storedProcedureParameters": {
											"copyDuration_in_secs": {
												"value": {
													"value": "@{activity('Copy_data_from_datalake_to_ASQL').output.copyDuration}",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactory_Name": {
												"value": {
													"value": "@{pipeline().DataFactory}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Destination": {
												"value": {
													"value": "@item().destination_table_name",
													"type": "Expression"
												},
												"type": "String"
											},
											"effectiveIntegrationRuntime": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').Error.errorCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorDescription": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').Error.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorLoggedTime": {
												"value": {
													"value": "@formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:ss')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Execution_Status": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"FailureType": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').Error.failureType",
													"type": "Expression"
												},
												"type": "String"
											},
											"No_ParallelCopies": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.usedParallelCopies",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Pipeline_Name": {
												"value": {
													"value": "@{pipeline().Pipeline}",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Sink_Type": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.executionDetails[0].sink.type",
													"type": "Expression"
												},
												"type": "String"
											},
											"Source": {
												"value": {
													"value": "@item().source_file_name",
													"type": "Expression"
												},
												"type": "String"
											},
											"Source_Type": {
												"value": {
													"value": "@activity('Copy_data_from_datalake_to_ASQL').output.executionDetails[0].source.type",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerId": {
												"value": {
													"value": "@{pipeline().TriggerId}",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerName": {
												"value": {
													"value": "@{pipeline().TriggerName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerTime": {
												"value": {
													"value": "@{pipeline().TriggerTime}",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerType": {
												"value": {
													"value": "@{pipeline().TriggerType}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_movies",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SetErrorMsg",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy_data_from_datalake_to_ASQL",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorMsg",
										"value": {
											"value": "@string(activity('Copy_data_from_datalake_to_ASQL'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "TruncateTables",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE stg.credits;\nTRUNCATE TABLE stg.movies_metadata;\nTRUNCATE TABLE stg.ratings;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"EndTime": {
						"type": "String"
					},
					"ErrorMsg": {
						"type": "String"
					},
					"Test1": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-18T20:31:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_copy_files_to_azurementoringdatalakeso')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_azurementoringstorageso",
								"type": "DatasetReference"
							},
							"name": "DsSourceAzurementoringstorageso"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_azurementoringdatalakesov2",
								"type": "DatasetReference"
							},
							"name": "DsSinkAzurementoringdatalakeso"
						}
					],
					"transformations": [
						{
							"name": "fileNameColumn"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'fileName',",
						"     wildcardPaths:['*.csv']) ~> DsSourceAzurementoringstorageso",
						"DsSourceAzurementoringstorageso derive(fileName = concat('/movies/',replace(fileName,'.csv',''),'_', toString(currentTimestamp(),'yyyyMMddHHmmss'),'.csv')) ~> fileNameColumn",
						"fileNameColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     rowUrlColumn:'fileName',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DsSinkAzurementoringdatalakeso"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module 8 Data Flow to populate DimMovies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_movies_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovies"
						}
					],
					"transformations": [
						{
							"name": "CreateTwoNewColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatusName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT  DISTINCT     \\n     m.[MovieIdNK],          \\n     m.[Title],\\n     m.[ReleaseDate],\\n     m.[Runtime],\\n     mstatus.[MovieStatusName]\\n  FROM [dbo].[tMovies] m\\n  LEFT JOIN dbo.[tMovieStatus] mstatus on M.MovieStatusId = mstatus.MovieStatusId',",
						"     format: 'query') ~> tMovies",
						"tMovies derive(CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> CreateTwoNewColumns",
						"CreateTwoNewColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimMovies"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module 8 Data Flow to populate DimOnlineService using hashcode')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_movies_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "ExistingRecordsDimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineServiceMaxValue"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DataMart_dbo_DimOnlineService_v2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DataMart_dbo_DimOnlineService_v2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "ExistingRecordsDimOnlineService1"
						},
						{
							"name": "SourceHash"
						},
						{
							"name": "Exists",
							"description": "If the hash in the source DOES NOT EXIST in the target then this is gonna be either a new or changed row"
						},
						{
							"name": "Lookup"
						},
						{
							"name": "ConditionalSplot",
							"description": "I want to identify records in my source that are brand new AND I want to identify those that are existing records that have been updated"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "AddMaxValueToSink"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          TypeOneRecordHash as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [ServiceKey]\\n           ,[ServiceCode]            \\n       ,TypeOneRecordHash     \\n  FROM [dbo].[DimOnlineService]',",
						"     format: 'query') ~> ExistingRecordsDimOnlineService",
						"source(output(",
						"          maxvalue as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '    SELECT CASE WHEN MAX([ServiceKey]) IS NULL THEN 0\\n                 ELSE MAX([ServiceKey]) \\n                 END AS maxvalue\\n                 FROM [dbo].[DimOnlineService]',",
						"     format: 'query') ~> DimOnlineServiceMaxValue",
						"ExistingRecordsDimOnlineService select(mapColumn(",
						"          ExistingServiceKey = ServiceKey,",
						"          ExistingServiceCode = ServiceCode,",
						"          ExistingTypeOneRecordHash = TypeOneRecordHash",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ExistingRecordsDimOnlineService1",
						"tOnlineService derive(SourceTypeOneRecordHash = sha2(256, ServiceCode, ServiceName)) ~> SourceHash",
						"SourceHash, ExistingRecordsDimOnlineService1 exists(SourceTypeOneRecordHash == ExistingTypeOneRecordHash,",
						"     negate:true,",
						"     broadcast: 'auto')~> Exists",
						"Exists, ExistingRecordsDimOnlineService1 lookup(ServiceCode == ExistingServiceCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Lookup",
						"Lookup split(isNull(ExistingServiceCode),",
						"     disjoint: false) ~> ConditionalSplot@(NewItems, UpdatedItems)",
						"ConditionalSplot@NewItems, DimOnlineServiceMaxValue join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 keyGenerate(output(NewServiceKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ServiceKey_NEW = NewServiceKey + maxvalue) ~> AddMaxValueToSink",
						"AddMaxValueToSink alterRow(insertIf(1==1)) ~> alterRow1",
						"ConditionalSplot@UpdatedItems derive(ModifiedDate = currentUTC()) ~> derivedColumn2",
						"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          TypeOneRecordHash as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate,",
						"          TypeOneRecordHash = SourceTypeOneRecordHash",
						"     )) ~> sink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          TypeOneRecordHash as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ServiceKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceKey = ExistingServiceKey,",
						"          ServiceCode,",
						"          ServiceName,",
						"          ModifiedDate,",
						"          TypeOneRecordHash = SourceTypeOneRecordHash",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module 8 Data Flow to populate Dimension tables_old version')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_movies_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovieMaxValue"
						},
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_movies_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "ServiceCodeFromDimOnlineService",
							"description": "select ServiceCode in tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_movies_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineServiceForInsert"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie",
							"description": "Export data to DS_SINK_ASQL_DataMart_dbo_DimMovie\nI did execute SET IDENTITY_INSERT [DimMovie] ON  to ingest my own surrogated key"
						},
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineServiceNewRows"
						}
					],
					"transformations": [
						{
							"name": "CreateTwoNewColumns",
							"description": "Creating CreatedDate and ModifiedDate"
						},
						{
							"name": "MovieKey"
						},
						{
							"name": "join1"
						},
						{
							"name": "AddMaxValueToSink",
							"description": "Add the maxvalue from the DimMovies to this new flow"
						},
						{
							"name": "CreateTwoNewColumns2",
							"description": "Creating CreatedDate and ModifiedDate"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "join2"
						},
						{
							"name": "CreateTwoNewColumns3"
						},
						{
							"name": "SelectOnlyNullValue",
							"description": "Select only the rows that do have a NULL value in the ServiceCode. This means that it does not exist in our Destination yet."
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatusName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT  DISTINCT     \\n     m.[MovieIdNK],          \\n     m.[Title],\\n     m.[ReleaseDate],\\n     m.[Runtime],\\n     mstatus.[MovieStatusName]\\n  FROM [dbo].[tMovies] m\\n  LEFT JOIN dbo.[tMovieStatus] mstatus on M.MovieStatusId = mstatus.MovieStatusId',",
						"     format: 'query') ~> tMovies",
						"source(output(",
						"          maxvalue as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '  SELECT CASE WHEN MAX([MovieKey]) IS NULL THEN 0\\n                 ELSE MAX([MovieKey]) \\n                 END AS maxvalue\\n                 FROM DBO.DimMovie',",
						"     format: 'query') ~> DimMovieMaxValue",
						"source(output(",
						"          ServiceCode as string,",
						"          ServiceName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '  SELECT DISTINCT\\n          os.ServiceCode,\\n          os.ServiceName  \\n  FROM dbo.tOnlineService os',",
						"     format: 'query') ~> tOnlineService",
						"source(output(",
						"          ServiceCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT ServiceCode   FROM [dbo].[DimOnlineService]',",
						"     format: 'query') ~> ServiceCodeFromDimOnlineService",
						"source(output(",
						"          ServiceCode as string,",
						"          ServiceName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '  SELECT DISTINCT\\n          os.ServiceCode,\\n          os.ServiceName  \\n  FROM dbo.tOnlineService os',",
						"     format: 'query') ~> tOnlineServiceForInsert",
						"join1 derive(CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> CreateTwoNewColumns",
						"CreateTwoNewColumns keyGenerate(output(MovieKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> MovieKey",
						"tMovies, DimMovieMaxValue join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"MovieKey derive(MovieKey_NEW = maxvalue + MovieKey) ~> AddMaxValueToSink",
						"tOnlineService derive(CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> CreateTwoNewColumns2",
						"CreateTwoNewColumns2 alterRow(updateIf(!isNull(ServiceCode))) ~> AlterRow1",
						"tOnlineServiceForInsert, ServiceCodeFromDimOnlineService join(tOnlineServiceForInsert@ServiceCode == ServiceCodeFromDimOnlineService@ServiceCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectOnlyNullValue derive(CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> CreateTwoNewColumns3",
						"join2 filter(isNull(ServiceCodeFromDimOnlineService@ServiceCode)==true()) ~> SelectOnlyNullValue",
						"AddMaxValueToSink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE [dbo].[DimMovie]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieKey,",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimMovie",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ServiceCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimOnlineService",
						"CreateTwoNewColumns3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode = tOnlineServiceForInsert@ServiceCode,",
						"          ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimOnlineServiceNewRows"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module 8 Data Flow to populate Fact tables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_movies_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "MappingQueryForFactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DS_SOURCE_ASQL_movies_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "MappingQueryForFactOnlinePurchaseMonthlySnapshot"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_ASQL_DataMart_dbo_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_SINK_DataMart_dbo_FactOnlinePurchaseMonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "GetServiceKey"
						},
						{
							"name": "GetMovieKey"
						},
						{
							"name": "TransformTransactionDate",
							"description": "Transform [TransactionDate] to DateKey"
						},
						{
							"name": "GetServiceKey2"
						},
						{
							"name": "TransformTransactionDate2"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionDate as timestamp,",
						"          ServiceCode as string,",
						"          MovieIdNK as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: ' SELECT DISTINCT \\n   op.[TransactionDate], -- Sample value is 20221231\\n   os.ServiceCode,\\n --  [dbo].[DimOnlineService].[ServiceKey],     -- Find a way to get [dbo].[DimOnlineService].[ServiceKey] value from [dbo].[tOnlinePurchase].[ServiceId]\\n  m.MovieIdNK,\\n --  [dbo].[DimMovie].[MovieKey],               -- Find a way to get [dbo].[DimMovie].[MovieKey] value from [dbo].[tOnlinePurchase].[MovieId]\\n   op.[Price],\\n   op.[TransactionId]\\n FROM [dbo].[tOnlinePurchase] op\\n LEFT JOIN dbo.tOnlineService os ON op.ServiceId = os.ServiceId\\n LEFT JOIN dbo.tMovies m ON m.MovieId = op.MovieId',",
						"     format: 'query') ~> MappingQueryForFactOnlinePurchase",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ServiceKey,ServiceCode FROM DimOnlineService',",
						"     format: 'query') ~> DimOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '  SELECT\\n       MovieKey,\\n      [MovieIdNK]     \\n  FROM [dbo].[DimMovie]',",
						"     format: 'query') ~> DimMovie",
						"source(output(",
						"          TransactionDate as timestamp,",
						"          ServiceCode as string,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: ' SELECT DISTINCT \\n   op.[TransactionDate], -- Sample value is 20221231\\n   os.ServiceCode,\\n   op.[Price],\\n   op.[TransactionId]\\n FROM [dbo].[tOnlinePurchase] op\\n LEFT JOIN dbo.tOnlineService os ON op.ServiceId = os.ServiceId',",
						"     format: 'query') ~> MappingQueryForFactOnlinePurchaseMonthlySnapshot",
						"MappingQueryForFactOnlinePurchase, DimOnlineService join(MappingQueryForFactOnlinePurchase@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetServiceKey",
						"GetServiceKey, DimMovie join(MappingQueryForFactOnlinePurchase@MovieIdNK == DimMovie@MovieIdNK,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetMovieKey",
						"GetMovieKey derive(DateKey = toInteger(add(add(toString(year(TransactionDate)), lpad(toString(month(TransactionDate)), 2, '0') ), lpad(toString(dayOfMonth(TransactionDate)), 2, '0') ))) ~> TransformTransactionDate",
						"MappingQueryForFactOnlinePurchaseMonthlySnapshot, DimOnlineService join(MappingQueryForFactOnlinePurchaseMonthlySnapshot@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetServiceKey2",
						"GetServiceKey2 derive(MonthKey = toInteger(add(toString(year(TransactionDate)), lpad(toString(month(TransactionDate)), 2, '0') ) )) ~> TransformTransactionDate2",
						"TransformTransactionDate2 aggregate(groupBy(MonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(TransactionId)) ~> aggregate1",
						"TransformTransactionDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE FactOnlinePurchase;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> FactOnlinePurchase",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE FactOnlinePurchase_MonthlySnapshot'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> FactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Exec Module 2 and Module 5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Exec Module 2 using file ext",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module 2 Copy activity in pipeline using file extension",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Exec Module 5 Loading Data To Azure SQL Database",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Exec Module 2 using file ext",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module 5 Loading Data To Azure SQL Database",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Module 5 Archive processed files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Exec Module 5 Loading Data To Azure SQL Database",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module 5 Archive processed files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-11T20:18:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute Module 8 DimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Module 8 Data Flow DimOnlineService using hashcode",
						"description": "Module 8 Data Flow to populate DimOnlineService using hashcode",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module 8 Data Flow to populate DimOnlineService using hashcode",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlineService": {},
									"ExistingRecordsDimOnlineService": {},
									"DimOnlineServiceMaxValue": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-12T00:23:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Module 8 Data Flow to populate DimOnlineService using hashcode')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute Module 8 pipelines')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This one ingest the dimensions and the Fact tables",
				"activities": [
					{
						"name": "Execute Module 8 Data Flow to populate Fact tables",
						"description": "Execute Module 8 Data Flow to populate Fact tables",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Module 8 Data Flow DimOnlineService using hashcode",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module 8 Data Flow to populate Fact tables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MappingQueryForFactOnlinePurchase": {},
									"DimOnlineService": {},
									"DimMovie": {},
									"MappingQueryForFactOnlinePurchaseMonthlySnapshot": {},
									"FactOnlinePurchase": {},
									"FactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Execute Module 8 Data Flow to populate Dimension tables",
						"description": "Execute Module 8 Data Flow to populate Dimension tables",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module 8 Data Flow to populate Dimension tables_old version",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tMovies": {},
									"DimMovieMaxValue": {},
									"tOnlineService": {},
									"ServiceCodeFromDimOnlineService": {},
									"tOnlineServiceForInsert": {},
									"DimMovie": {},
									"DimOnlineService": {},
									"DimOnlineServiceNewRows": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Module 8 Data Flow to populate DimMovies",
						"description": "Module 8 Data Flow to populate DimMovies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module 8 Data Flow to populate DimMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tMovies": {},
									"DimMovies": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Module 8 Data Flow DimOnlineService using hashcode",
						"description": "Module 8 Data Flow to populate DimOnlineService using hashcode",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Module 8 Data Flow to populate DimMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module 8 Data Flow to populate DimOnlineService using hashcode",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlineService": {},
									"ExistingRecordsDimOnlineService": {},
									"DimOnlineServiceMaxValue": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-12T00:23:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Module 8 Data Flow to populate Fact tables')]",
				"[concat(variables('factoryId'), '/dataflows/Module 8 Data Flow to populate Dimension tables_old version')]",
				"[concat(variables('factoryId'), '/dataflows/Module 8 Data Flow to populate DimMovies')]",
				"[concat(variables('factoryId'), '/dataflows/Module 8 Data Flow to populate DimOnlineService using hashcode')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute all Module 7 pipelines')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Module 7 Incremental copy files",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module 7 Incremental copy files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Module 7 Load JSON to Azure SQL Database",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Module 7 Incremental copy files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module 7 Load JSON to Azure SQL Database",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Module 7 Archive processed json files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Module 7 Load JSON to Azure SQL Database",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module 7 Archive processed json files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-02T23:22:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Module 7 Load JSON to Azure SQL Database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module 2 Copy activity in pipeline DataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_copy_files_to_azurementoringdatalakeso",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_copy_files_to_azurementoringdatalakeso",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DsSourceAzurementoringstorageso": {},
									"DsSinkAzurementoringdatalakeso": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AutoResolveIntegrationRuntime2",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-24T00:27:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_copy_files_to_azurementoringdatalakeso')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module 8 Run Module 8 Data Flow to populate Dimension tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Module 8 Data Flow to populate Dimension tables",
						"description": "Execute Module 8 Data Flow to populate Dimension tables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module 8 Data Flow to populate Dimension tables_old version",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tMovies": {},
									"DimMovieMaxValue": {},
									"tOnlineService": {},
									"ServiceCodeFromDimOnlineService": {},
									"tOnlineServiceForInsert": {},
									"DimMovie": {},
									"DimOnlineService": {},
									"DimOnlineServiceNewRows": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-12T00:23:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Module 8 Data Flow to populate Dimension tables_old version')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module 8 Run Module 8 Data Flow to populate Fact  tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Module 8 Data Flow to populate Fact tables",
						"description": "Execute Module 8 Data Flow to populate Fact tables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Module 8 Data Flow to populate Fact tables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MappingQueryForFactOnlinePurchase": {},
									"DimOnlineService": {},
									"DimMovie": {},
									"MappingQueryForFactOnlinePurchaseMonthlySnapshot": {},
									"FactOnlinePurchase": {},
									"FactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-06T21:27:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Module 8 Data Flow to populate Fact tables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Module 6 Incremental copy from on-premises MS SQL",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-07-20T23:14:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute All 3 Pipelines - Module 2 only')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module 2 Copy activity in pipeline foreach",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataFlow",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module 2 Copy activity in pipeline DataFlow",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FileExtension",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataFlow",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Module 2 Copy activity in pipeline using file extension",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-11T17:28:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Module 2 Copy activity in pipeline DataFlow')]"
			]
		}
	]
}