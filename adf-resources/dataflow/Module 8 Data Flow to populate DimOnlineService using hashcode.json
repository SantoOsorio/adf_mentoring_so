{
	"name": "Module 8 Data Flow to populate DimOnlineService using hashcode",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SOURCE_ASQL_movies_dbo_tOnlineService",
						"type": "DatasetReference"
					},
					"name": "tOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DS_SOURCE_ASQL_DataMart_dbo_DimOnlineService",
						"type": "DatasetReference"
					},
					"name": "ExistingRecordsDimOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DS_SOURCE_ASQL_DataMart_dbo_DimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineServiceMaxValue"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_SINK_ASQL_DataMart_dbo_DimOnlineService_v2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_SINK_ASQL_DataMart_dbo_DimOnlineService_v2",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "ExistingRecordsDimOnlineService1"
				},
				{
					"name": "SourceHash"
				},
				{
					"name": "Exists",
					"description": "If the hash in the source DOES NOT EXIST in the target then this is gonna be either a new or changed row"
				},
				{
					"name": "Lookup"
				},
				{
					"name": "ConditionalSplot",
					"description": "I want to identify records in my source that are brand new AND I want to identify those that are existing records that have been updated"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "AddMaxValueToSink"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ServiceId as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlineService",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          TypeOneRecordHash as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT [ServiceKey]\\n           ,[ServiceCode]            \\n       ,TypeOneRecordHash     \\n  FROM [dbo].[DimOnlineService]',",
				"     format: 'query') ~> ExistingRecordsDimOnlineService",
				"source(output(",
				"          maxvalue as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: '    SELECT CASE WHEN MAX([ServiceKey]) IS NULL THEN 0\\n                 ELSE MAX([ServiceKey]) \\n                 END AS maxvalue\\n                 FROM [dbo].[DimOnlineService]',",
				"     format: 'query') ~> DimOnlineServiceMaxValue",
				"ExistingRecordsDimOnlineService select(mapColumn(",
				"          ExistingServiceKey = ServiceKey,",
				"          ExistingServiceCode = ServiceCode,",
				"          ExistingTypeOneRecordHash = TypeOneRecordHash",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ExistingRecordsDimOnlineService1",
				"tOnlineService derive(SourceTypeOneRecordHash = sha2(256, ServiceCode, ServiceName)) ~> SourceHash",
				"SourceHash, ExistingRecordsDimOnlineService1 exists(SourceTypeOneRecordHash == ExistingTypeOneRecordHash,",
				"     negate:true,",
				"     broadcast: 'auto')~> Exists",
				"Exists, ExistingRecordsDimOnlineService1 lookup(ServiceCode == ExistingServiceCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> Lookup",
				"Lookup split(isNull(ExistingServiceCode),",
				"     disjoint: false) ~> ConditionalSplot@(NewItems, UpdatedItems)",
				"ConditionalSplot@NewItems, DimOnlineServiceMaxValue join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(CreatedDate = currentUTC(),",
				"          ModifiedDate = currentUTC()) ~> derivedColumn1",
				"derivedColumn1 keyGenerate(output(NewServiceKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(ServiceKey_NEW = NewServiceKey + maxvalue) ~> AddMaxValueToSink",
				"AddMaxValueToSink alterRow(insertIf(1==1)) ~> alterRow1",
				"ConditionalSplot@UpdatedItems derive(ModifiedDate = currentUTC()) ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          TypeOneRecordHash as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ServiceCode,",
				"          ServiceName,",
				"          CreatedDate,",
				"          ModifiedDate,",
				"          TypeOneRecordHash = SourceTypeOneRecordHash",
				"     )) ~> sink1",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          TypeOneRecordHash as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ServiceKey'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ServiceKey = ExistingServiceKey,",
				"          ServiceCode,",
				"          ServiceName,",
				"          ModifiedDate,",
				"          TypeOneRecordHash = SourceTypeOneRecordHash",
				"     )) ~> sink2"
			]
		}
	}
}